a12 <- matrix(c(0.5,0.6,0.3,0.4),nrow = 2)
a12
a12 <- matrix(c(0.5,0.3,0.6,0.4),nrow = 2)
a12
a22 <- matrix(c(1.0416667,-0.208333,-0208333,1.0416667),nrow = 2)
a22
a21 <- matrix(c(0.5,0.3,0.6,0.4),nrow = 2)
a21
a21 <- matrix(c(0.5,0.6,0.3,0.4),nrow = 2)
a21
a11
mat_fin <- a11 %*% a12 %*% a22 %*% a21 %*% a11
mat_fin
eigen(mat_fin)
a11
a21 <- matrix(c(8,2,2,5),nrow = 2)
q1 <- matrix(c(8,2,2,5),nrow = 2)
q1
a21 <- matrix(c(0.5,0.6,0.3,0.4),nrow = 2)
a21
a11
eigen(a11)
a11
a11
q1 <- matrix(c(1,0.4,0.4,1),nrow = 2)
q1
eigen(q1)
$val
$values
values
m <- eigen(q1)
m
m$values
sqrt(m$values)
n <- matrix(c(0.4371,0.2178,0),nrow = 2)
n <- matrix(c(0.4371,0.2178,0.2178,0.1096),nrow = 2)
n
eigen(n)
aa1 <- matrix(c(1.0681,-0.2229,-0.2229,1.0681),nrow = 2)
aa1
aa1 <- matrix(c(0.8561,0.2776))
aa1 <- matrix(c(1.0681,-0.2229,-0.2229,1.0681),nrow = 2)
e1 <- matrix(c(0.8561,0.2776))
aa1 %*% e1
e1
e1 <- matrix(c(0.8561,0.2776), ncol = 2)
e1
aa1 %*% e1
e1 <- matrix(c(0.8561,0.2776))
e1
aa1
aa1 %*% e1
e1 <- matrix(c(0.8561,0.4466))
e1
aa1 %*% e1
e1 <- matrix(c(0.8947,0.4466))
aa1 %*% e1
?gam
library(mgcv)
?gam
?s
z=0
mat <- matrix(1,0.5,0.5,0.5)
mat
mat <- matrix(c(1,0.5,0.5,1))
mat
mat <- matrix(c(1,0.5,0.5,1),nrow = 2)
mat
eigen(mat)
mat <- matrix(c(1,0.9,0.7,0.9,1,.4,.7,))
mat <- matrix(c(1,0.9,0.7,0.9,1,.4,.7,.4,1),nrow = 3)
mat
eigen(mat)
mat <- matrix(c(1,0.2,0.2,1),nrow = 2)
mat
solve(mat)
mat <- matrix(c(1,.4,.4,1),nrow = 2)
mat
solve(mat)
a<- solve(mat)
a
b <- sqrt(a)
?sqrt
sqrt(a)
sqrt(a[1])
sqrt(a[2])
a[2]
sqrt(0.4761905)
mat
sqrt(mat)
xx <- sqrt(mat)
xx
solve(xx)
mat
eigen(mat)
eig <- eigen(mat)
eig
eig$vectors
m1 <- matrix(c(1.183216,0,0,0.7746),nrow=2)
m1
aaa <- eig$vectors %*% m1 %*% t(eig$vectors)
aaa
solve(aaa)
a11 <- solve(aaa)
a11
mm <- matrix(c(0.4371,0.2178,0.2178,0.1096))
mm
mm <- matrix(c(0.4371,0.2178,0.2178,0.1096),nrow = 2)
mm
eigen(mm)
mm <- matrix(c(1,2,1,1,1,2),nrow=nrow = )
mm <- matrix(c(1,2,1,1,1,2),nrow=3 )
mm
eigen(mm)
cov(mm)
e<-cov(mm)
e
eigen(e)
pcom
?
?
as
pcom(e)
prcomp
?princomp(e)
princomp(e)
a=232
a
as=2323
as
as+a
?s
library(mgcv)
?s
library(pamr)
?pamr.train
pamr.cv()
?pamr.cv()
?predict.glmnet
library(pamr)
?predict.glmnet
library(mboost)
bf <- read.csv2("bodyfatregression.csv")
setwd("E:/Part 2/Machine Learning Labs/Lab 3 - Block 1")
bf <- read.csv2("bodyfatregression.csv")
setwd("E:/Part 2/Machine Learning/OLD EXAMS/tenta1")
bf <- read.csv2("bodyfatregression.csv")
bf
set.seed(1234567890)
m <- blackboost(Bodyfat_percent˜Waist_cm+Weight_kg, data=bf)
m
m <- blackboost(Bodyfat_percent˜Waist_cm+Weight_kg, data=bf)
m <- blackboost(Bodyfat_percent˜Waist_cm + Weight_kg, data=bf)
m <- blackboost(Bodyfat_percent~Waist_cm + Weight_kg, data=bf)
mstop(m)
mstop(m)
?mstop
?cv
?model.weights
cvf <- cv(model.weights(m), type="kfold")
cvm <- cvrisk(m, folds=cvf, grid=1:100)
plot(cvm)
mstop(cvm)
cvf
cvm <- cvrisk(m, folds=cvf, grid=1:100)
cvm
?cvrisk
View(bf)
?blackboost
df <- read.csv2("bodyfatregression.csv")
set.seed(1234567890)
m <- blackboost(Bodyfat_percent~Waist_cm + Weight_kg, data=df)
plot(m)
cvf <- cv(model.weights(m), type="kfold")
plot(cvm)
library(mboost)
bf <- read.csv2("bodyfatregression.csv")
set.seed(1234567890)
m <- blackboost(Bodyfat_percent~Waist_cm + Weight_kg, data=bf)
mstop(m)
cvf <- cv(model.weights(m), type="kfold")
cvm <- cvrisk(m, folds=cvf, grid=1:100)
plot(cvm)
mstop(cvm)
library(kernlab)
?kernlab
?svm
?ksvm
datasets::spam
spam
library(kernlab)
spam
datasets.load::alldata()
spam
load(spam)
data(spam)
library(glmnet)
rbfdot_mod <- ksvm(data=spam, type = NULL,
C = c(1,5) , kernel = "rbfdot", kpar = list(length=c(0.01,0.05)))
library(kernlab)
rbfdot_mod <- ksvm(data=spam, type = NULL,
C = c(1,5) , kernel = "rbfdot", kpar = list(length=c(0.01,0.05)))
rbfdot_mod <- ksvm(data=spam, type = NULL,
C = c(1,5) , kernel = "rbfdot", kpar = list(length=0.01))
spam
View(spam)
rbfdot_mod <- ksvm(data=spam,spam~., type = NULL,
C = c(1,5) , kernel = "rbfdot", kpar = list(length=0.01))
rbfdot_mod <- ksvm(data=spam,spam~. ,
C = c(1,5) , kernel = "rbfdot", kpar = list(length=0.01))
rbfdot_mod <- ksvm(data=spam,type~. ,
C = c(1,5) , kernel = "rbfdot", kpar = list(length=0.01))
rbfdot_mod <- ksvm(data=spam,type~. ,
C = c(1,5) , kernel = "rbfdot", kpar = list(length=0.01))
rbfdot_mod <- ksvm(data=spam,type~. ,
C = c(1,5) , kernel = "rbfdot")
rbfdot_mod
?suppressWarnings
?pamr.train
library(pamr)
?pamr.train
?prune.tree
library(tree)
?prune.tree
prior <- c(1, 1) / 2
prior
prior <- as.numeric(table(data$am) / sum(table(data$am)))
setwd("E:/Part 2/Machine Learning/OLD EXAMS/tenta1")
library(ggplot2) # K NEAREST NEIGHBOR
data = read.csv2("State.csv", header = TRUE)
setwd("E:/Part 2/Machine Learning/OLD EXAMS/tenta1")
setwd("E:/Part 2/Machine Learning/OLD EXAMS")
setwd("E:/Part 2/Machine Learning/OLD EXAMS/tenta1")
library(ggplot2) # K NEAREST NEIGHBOR
data = read.csv2("State.csv", header = TRUE)
data = read.csv2("crx.csv", header = TRUE)
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
data = read.csv2("crx.csv", header = TRUE)
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
data
View(data)
View(data)
View(data)
data = read.csv2("crx.csv")
View(data)
data<- read.csv2("crx.csv" ,sep = ",",dec=".")
View(data)
data<- read.csv2("crx.csv" ,dec=".")
View(data)
data<- read.csv2("crx.csv" ,sep = ",",dec=".")
data<- read.csv2("crx.csv" ,sep = ",")
View(data)
data<- read.csv2("crx.csv" ,sep = ",",dec=".")
View(data)
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
n=dim(data)[1] # n = 2740 Length of data
n
id=sample(1:n, floor(n*0.8)) # Divide data into 50% 2740/2 = 1370 Observations
id
View(data)
length(id)
690*80
/100
55200/100
id=sample(1:n, floor(n*0.8)) # Divide data into 50% 2740/2 = 1370 Observations
train=data[id,] #train is data
test=data[-id,] #test data is newData
train
length(train)
size(train)
dim(train)
dim(train)[1]
dim(test)
138+552
train=data[id,] #train is data
test=data[-id,] #test data is newData
?tree
library(tree)
library(e1071)
?tree
str(train)
def_tree = tree(formula = class ~ ., data = train)
def_tree = tree(formula = as.factor(class) ~ ., data = train)
def_tree = tree(formula = as.factor(class) ~ ., data = train)
data <- as.factor(data)
data <- as.factor(data)
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
def_tree
tree
plot(tree)
plot(def_tree)
train <- train[,-2]
train=data[id,] #train is data
test=data[-id,] #test data is newData
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
new_train <- train[,-2]
new_train
View(new_train)
new_train <- train[,-2]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(new_def_tree)
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
n=dim(data)[1] # n = 690 Length of data
id=sample(1:n, floor(n*0.8)) # Divide data into 50% 2740/2 = 1370 Observations
train=data[id,] #train is data
test=data[-id,] #test data is newData
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
new_train <- train[,-2]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(new_def_tree)
plot(def_tree)
new_train <- train[,-2]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = new_train)
plot(new_def_tree)
View(new_train)
View(train)
train=data[id,] #train is data
test=data[-id,] #test data is newData
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
new_train <- train[,-2]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = new_train)
plot(new_def_tree)
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
text(def_tree)
new_train <- train[,-2]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = new_train)
plot(new_def_tree)
text(new_def_tree)
new_train <- train[-2,]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = new_train)
plot(new_def_tree)
text(new_def_tree)
data<- read.csv2("crx.csv" ,sep = ",")
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
n=dim(data)[1] # n = 690 Length of data
id=sample(1:n, floor(n*0.8)) # Divide data into 50% 2740/2 = 1370 Observations
train=data[id,] #train is data
test=data[-id,] #test data is newData
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
text(def_tree)
new_train <- train[-2,]
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
data<- read.csv2("crx.csv" ,sep = ",",dec=".")
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
n=dim(data)[1] # n = 690 Length of data
id=sample(1:n, floor(n*0.8)) # Divide data into 50% 2740/2 = 1370 Observations
train=data[id,] #train is data
test=data[-id,] #test data is newData
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
text(def_tree)
new_train <- train[-2,]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = new_train)
plot(new_def_tree)
text(new_def_tree)
data<- read.csv2("crx.csv" ,sep = ",",dec=".")
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
?read.csv2
View(data)
set.seed(12345)
data <- as.data.frame(data) # convert into data frame
data <- as.data.frame(data) # convert into data frame
data
n=dim(data)[1] # n = 690 Length of data
id=sample(1:n, floor(n*0.8)) # Divide data into 80/20
id
train=data[id,] #train is data
test=data[-id,] #test data is newData
View(train)
View(test)
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
text(def_tree)
new_train <- train[-2,]
new_def_tree = tree(formula = as.factor(Class) ~ ., data = new_train)
plot(new_def_tree)
text(new_def_tree)
index = summary(def_tree)[4]$size
index
trainScore = rep(0,index)
din(train)
dim(train)
def_tree
summary(def_tree)
summary(def_tree)[4]
summary(def_tree)[4]$size
2:index
for(i in 1:index) {
prunedTree=prune.tree(tree_deviance,best=i)
pred=predict(prunedTree, newdata=validation,type="tree")
trainScore[i]=deviance(prunedTree)
testScore[i]=deviance(pred)
}
?prune.tree
for(i in 1:index) {
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best=best = cv_tree$size[which.min(cv_tree$dev)])
}
for(i in 1:index)
{
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best= cv_tree$size[which.min(cv_tree$dev)])
}
prunedTree
{
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best= cv_tree$size[which.min(cv_tree$dev)])
}
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
for(i in 1:index)
{
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best= i)
}
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best= cv_tree$size[which.min(cv_tree$dev)])
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best= cv_tree$size[which.min(cv_tree$dev)])
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
cv_tree= cv.tree(def_tree)
cv_tree
prunedTree = prune.tree(def_tree , best= cv_tree$size[which.min(cv_tree$dev)])
prunedTree
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
for(i in 1:index)
{
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best= cv_tree$size[which.min(cv_tree$dev)])
}
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
plot(cv_tree)
plot.cv(cv_tree)
plot(cv_tree$size, cv_tree$dev, main = "Deviance Vs Size of Tree" ,
type="b",col="red", pch= 19,cex=1)
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
plot(cv_tree)
text(cv_tree, pretty=1, cex = 0.8, xpd = TRUE)
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
text(def_tree)
index = summary(def_tree)[4]$size
cv_tree= cv.tree(def_tree)
prunedTree = prune.tree(def_tree , best= cv_tree$size[which.min(cv_tree$dev)])
plot(cv_tree$size, cv_tree$dev, main = "Deviance Vs Size of Tree" ,
type="b",col="red", pch= 19,cex=1)
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
plot(cv_tree$size, cv_tree$dev, main = "Deviance Vs Size of Tree" ,
type="b",col="red", pch= 19,cex=1)
plot(cv_tree$size, cv_tree$dev, main = "Deviance Vs Size of Tree" ,
type="b",col="red", pch= 19,cex=1)
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
cv_tree$size[which.min(cv_tree$dev)]
nested.cv
?nested.cv
library(caret)
nested.cv
?nested.cv
??nested.cv
?as.factor
?predict()
cvrisk
?cvrisk
plot(prunedTree)
text(prunedTree, pretty=1, cex = 0.8, xpd = TRUE)
?createFolds
>cross()
?cross()
?density
?kernel
?ksvm
spam
data(spam)
library(kernlab)
data(spam)
View(spam)
filter <- ksvm(type~.,data=spam,kernel="rbfdot",
kpar=list(sigma=0.05),C=5,cross=2)
filter
?cross()
?cross
cross(filter)
filter <- ksvm(type~.,data=spam,kernel="rbfdot",
kpar=list(sigma=0.05),C=c(1,10,100),cross=2)
filter
cross(filter)
def_tree = tree(formula = as.factor(Class) ~ ., data = train)
plot(def_tree)
text(def_tree)
def_tree = tree(formula = ~ , data = train)
plot(def_tree)
?test
