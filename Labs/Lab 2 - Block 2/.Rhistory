library(ggplot2)
library(knitr)
library(scales)
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
rownames(data) <- 1:nrow(data)
set.seed(12345)
train_idx <- sample(nrow(data), size=floor(nrow(data) * 7 / 10))
train <- data[train_idx,]
test <- data[-train_idx,]
x <- as.matrix(train[, -ncol(data)])
y <- train[, ncol(data)]
x_test <- as.matrix(test[, -ncol(data)])
y_test <- test[, ncol(data)]
set.seed(12345)
nsc.x <- t(x)
nsc.x_test = t(x_test)
nsc_data <- list(x=nsc.x, y=as.factor(y),
geneid=as.character(1:nrow(nsc.x)),
genenames=rownames(nsc.x))
model <- pamr.train(nsc_data, threshold=seq(0,4, 0.1))
cvmodel <- pamr.cv(model, nsc_data)
nsc_optimal_threshold <- rev(cvmodel$threshold)[which.min(rev(cvmodel$error))]
?rev
nsc_optimal_threshold
nsc_optimal_size <- rev(cvmodel$size)[which.min(rev(cvmodel$error))]
nsc_optimal_size
data0 <- read.csv2("data.csv",fileEncoding="iso-8859-15")
data <- as.data.frame(data0)
data$Conference<-as.factor(data$Conference)
set.seed(1234567890)
n <- nrow(data)
indices <- sample(1:n, floor(0.7*n))
train <- data[indices,]
test <- data[-indices,]
library(pamr)
x<-t(train[,-which(colnames(train)=="Conference")])
y<-train[[which(colnames(train)=="Conference")]]
train$Conference
mydata <- list(x=x, y=as.factor(y), geneid=as.character(1:nrow(x)), genenames=rownames(x))
data_fit <- pamr.train(mydata)
fit_cv <- pamr.cv(data_fit, mydata)
pamr.plotcv(fit_cv)
pamr.plotcv(fit_cv)
pamr.plotcv(fit_cv)
min_thresholds <- which(fit_cv$error==min(fit_cv$error)) #3-9,11-18 best threshold
min_thresholds
fit_cv
chosen_threshold<-fit_cv$threshold[max(min_thresholds)] #choose threshold with fewest genes
chosen_threshold
nrow
nrow(nsc.x)
nsc.x_test
library(glmnet)
library(kernlab)
library(ggplot2)
library(knitr)
library(scales)
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
rownames(data) <- 1:nrow(data)
set.seed(12345)
train_idx <- sample(nrow(data), size=floor(nrow(data) * 7 / 10))
train <- data[train_idx,]
test <- data[-train_idx,]
x <- as.matrix(train[, -ncol(data)])
y <- train[, ncol(data)]
x_test <- as.matrix(test[, -ncol(data)])
y_test <- test[, ncol(data)]
set.seed(12345)
y_test
y_test
x_test
y
x
rownames(data)
pamr.plotcv(cv_model) # legend is not shown in plot and only 2 lines are drawn why?
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
data1 <- as.data.frame(data)
data_email <- as.data.frame(data)
data_email$Conference <- as.factor(data$Conference)
n=dim(data_email)[1]
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
data1 <- as.data.frame(data)
data_email <- as.data.frame(data)
data_email$Conference <- as.factor(data$Conference)
n=dim(data_email)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.7))
train=data_email[id,]
test = data_email[-id,]
library(pamr)
rownames(train) <- 1:nrow(train)
which(colnames(train)=="Conference")
x <- t(train[,-4703])
y <- train[[4703]]
test_x <- t(test[,-4703])
mydata <- list(x=x, y= as.factor(y),
geneid=as.character(1:nrow(x)),genenames = rownames(x))
model_train <- pamr.train(mydata)
cv_model <- pamr.cv(model_train, data = mydata)
pamr.plotcv(cv_model) # legend is not shown in plot and only 2 lines are drawn why?
print(cv_model)
model_fit <- pamr.train(mydata,threshold = cv_model$threshold[which.min(cv_model$error)])
model_fit
par(mfrow=c(1,1),mar=c(2,2,2,2))
pamr.plotcen(model_train, mydata, threshold = cv_model$threshold[which.min(cv_model$error)])
pamr.plotcen(model_train[1:10], mydata, threshold = cv_model$threshold[which.min(cv_model$error)])
model_train
pamr.plotcen(model_train, mydata, threshold = cv_model$threshold[which.min(cv_model$error)])
features = pamr.listgenes(model_train,
mydata, threshold = 1.306,
genenames=TRUE)
features
features = pamr.listgenes(model_train,
mydata, threshold = 1.306,
genenames=TRUE)
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
ypredict <- pamr.predict(model_train, newx = test_x,
type = "class", threshold = 1.306)
conf_mat <- table(ypredict, test$Conference)
ypredict
model_fit
pamr.plotcen(model_train, mydata, threshold = cv_model$threshold[which.min(cv_model$error)])
pamr.plotcen(model_train, mydata, threshold = cv_model$threshold[which.min(cv_model$error)])
pamr.plotcen(model_train, mydata, threshold = 1.306)
model_fit
model_fit$threshold
pamr.plotcen(model_train, mydata, threshold = model_fit$threshold)
features = pamr.listgenes(model_train,
mydata, threshold = 1.306,
genenames=TRUE)
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
ypredict <- pamr.predict(model_train, newx = test_x,
type = "class", threshold = 1.306)
ypredict
ypredict <- pamr.predict(model_train, newx = test_x,type = "class", threshold = 1.306)
ypredict
conf_mat <- table(ypredict, test$Conference)
conf_mat
misclas_centroid <- 1 - (sum(diag(conf_mat))/sum(conf_mat))
misclas_centroid
df_misclas <- data.frame(centroid = misclas_centroid, elastic = misclassification_elastic,
svm = misclas_svm)
data0 <- read.csv2("data.csv",fileEncoding="iso-8859-15")
data <- as.data.frame(data0)
data$Conference<-as.factor(data$Conference)
set.seed(1234567890)
n <- nrow(data)
indices <- sample(1:n, floor(0.7*n))
train <- data[indices,]
test <- data[-indices,]
library(pamr)
x<-t(train[,-which(colnames(train)=="Conference")])
y<-train[[which(colnames(train)=="Conference")]]
train$Conference
mydata <- list(x=x, y=as.factor(y), geneid=as.character(1:nrow(x)), genenames=rownames(x))
data_fit <- pamr.train(mydata)
fit_cv <- pamr.cv(data_fit, mydata)
pamr.plotcv(fit_cv)
min_thresholds<-which(fit_cv$error==min(fit_cv$error)) #3-9,11-18 best threshold
chosen_threshold<-fit_cv$threshold[max(min_thresholds)] #choose threshold with fewest genes
chosen_threshold<-fit_cv$threshold[max(min_thresholds)] #choose threshold with fewest genes
chosen_threshold
pamr.plotcen(data_fit,mydata, threshold = chosen_threshold)
pamr.listgenes(data_fit, mydata, threshold = chosen_threshold)
fit_list<-pamr.listgenes(data_fit, mydata, threshold=chosen_threshold)[1:10,]
results <- as.numeric(fit_list[,1])
most_contributing<-colnames(train[results])
most_contributing
x_test <- t(test[,-which(colnames(test)=="Conference")])
pred <- pamr.predict(data_fit, x_test, threshold=chosen_threshold) #predicitons
test_error <- function(testdata, predictions){
conf_mat<-table(True=testdata, Pred=predictions) #Confusion matrix
misclass_rate<- 1 - (sum(diag(conf_mat))/sum(conf_mat)) #misclassification rate
list(conf_mat, misclass_rate)
}
cat("Misclassification rate for test data: ", nsc_error<-test_error(test$Conference, pred)[[2]])
library(glmnet)
set.seed(1234567890)
elastic_fit <- cv.glmnet(x = t(x), y=y, family = "binomial", alpha=0.5, type.measure = "class")
elastic_model <- glmnet(x=t(x), y=y, family="binomial", alpha=0.5, lambda = elastic_fit$lambda.min)
pred_el <- as.numeric(predict(elastic_model, t(x_test), type="class"))
cat("Misclassification rate for test data: ", el_error<-test_error(test$Conference, pred_el)[[2]])
feature_coef <- as.matrix(coef(elastic_fit, elastic_fit$lambda.min)) #coefficients of final model
num_features<-length(feature_coef[feature_coef!=0]) #selected features
cat("Number of selected features: ", num_features)
library(kernlab)
set.seed(1234567890)
svm_fit <- ksvm(Conference~. , data=train, kernel="vanilladot")
pred_svm <- predict(svm_fit, t(x_test))
svm_error<-test_error(test$Conference, pred_svm)[[2]]
cat("Number of selected features: ", svm_num)
comp_table<-data.frame("Test error"=c(nsc_error, el_error, svm_error), Features=c(24, num_features, svm_num))
rownames(comp_table)<-c("NSC", "Elastic", "SVM")
p_values <- vector(length = (length(names(data0))-1))
for(i in 1:(length(names(data0))-1)){
formula <- as.formula(paste(names(data0)[i],"~ Conference"))
p_values[i]<- t.test(formula = formula, data = data0, alternative = "two.sided")$p.value
}
comp_table
cat("Misclassification rate for test data: ", svm_error)
svm_num<- length(coef(svm_fit)[[1]]) #number of selected features
p_values_ordered<-p_values[order(p_values, decreasing = FALSE)]
a<-0.05 #alpha value, 95%
critical_values <- a*c(1:length(p_values))/length(p_values)
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
data1 <- as.data.frame(data)
data_email <- as.data.frame(data)
data_email$Conference <- as.factor(data$Conference)
n=dim(data_email)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.7))
train=data_email[id,]
test = data_email[-id,]
library(pamr)
rownames(train) <- 1:nrow(train)
which(colnames(train)=="Conference")
x <- t(train[,-4703])
y <- train[[4703]]
test_x <- t(test[,-4703])
mydata <- list(x=x, y= as.factor(y),
geneid=as.character(1:nrow(x)),genenames = rownames(x))
model_train <- pamr.train(mydata)
cv_model <- pamr.cv(model_train, data = mydata)
pamr.plotcv(cv_model)
print(cv_model)
model_fit <- pamr.train(mydata,threshold = cv_model$threshold[which.min(cv_model$error)])
par(mfrow=c(1,1),mar=c(2,2,2,2))
pamr.plotcen(model_train, mydata, threshold = model_fit$threshold)
features = pamr.listgenes(model_train,mydata, threshold = 1.306,genenames=TRUE)
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
ypredict <- pamr.predict(model_train, newx = test_x,type = "class", threshold = 1.306)
conf_mat <- table(ypredict, test$Conference)
misclas_centroid <- 1 - (sum(diag(conf_mat))/sum(conf_mat))
df_misclas <- data.frame(centroid = misclas_centroid, elastic = misclassification_elastic,
svm = misclas_svm)
misclas_centroid <- 1 - (sum(diag(conf_mat))/sum(conf_mat))
misclas_centroid
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
data1 <- as.data.frame(data)
data_email <- as.data.frame(data)
data_email$Conference <- as.factor(data$Conference)
n=dim(data_email)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.7))
train=data_email[id,]
test = data_email[-id,]
library(pamr)
rownames(train) <- 1:nrow(train)
which(colnames(train)=="Conference")
x <- t(train[,-4703])
y <- train[[4703]]
test_x <- t(test[,-4703])
mydata <- list(x=x, y= as.factor(y),
geneid=as.character(1:nrow(x)),genenames = rownames(x))
model_train <- pamr.train(mydata)
cv_model <- pamr.cv(model_train, data = mydata)
pamr.plotcv(cv_model)
print(cv_model)
model_fit <- pamr.train(mydata,threshold = cv_model$threshold[which.min(cv_model$error)])
par(mfrow=c(1,1),mar=c(2,2,2,2))
pamr.plotcen(model_train, mydata, threshold = model_fit$threshold)
features = pamr.listgenes(model_train,mydata, threshold = 1.306,genenames=TRUE)
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
features
features
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
cat( paste( colnames(train)[as.numeric(features[1:10,2])], collapse='\n' ) )
cat( paste( colnames(train)[as.numeric(features[1:10,0])], collapse='\n' ) )
cat( paste( colnames(train)[as.numeric(features[1:10,0])], collapse='\n' ) )
1
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
colnames(train)[as.numeric(features[1:10,1])]
response <- train$Conference
response
predictors <- as.matrix(train[,-4703])
predictors
elastic_model <- glmnet(x=predictors,y=response,family = "binomial",alpha = 0.5)
elastic_model
cv.fit <- cv.glmnet(x=predictors,y=response,family="binomial",alpha = 0.5)
cv.fit
cv.fit$lambda.min
par(mar=c(2,2,2,2))
plot(cv.fit)
plot(elastic_model)
predictor_test <- as.matrix(test[,-4703])
predictor_test
?predict
ypredict <- predict(object = elastic_model,newx = predictor_test, s = cv.fit$lambda.min,
type = "class", exact = TRUE)
confusion_mat <- table(ypredict,test$Conference)
misclassification <- 1 - (sum(diag(confusion_mat))/sum(confusion_mat))
library(kernlab)
x <- as.matrix(train[,-4703])
y <- train[,4703]
svm_fit <- ksvm(data = train,Conference ~ . ,kernel="vanilladot",
scaled = FALSE)
ypred <- predict(svm_fit, newdata = test, type="response")
confusion_mat <- table(ypred,test$Conference)
misclas_svm <- 1 - sum (diag(confusion_mat))/sum(confusion_mat)
y <- train[,4703]
x <- as.matrix(train[,-4703])
y <- train[,4703]
svm_fit <- ksvm(data = train,Conference ~ . ,kernel="vanilladot",
scaled = FALSE)
ypred <- predict(svm_fit, newdata = test, type="response")
confusion_mat <- table(ypred,test$Conference)
misclas_svm <- 1 - sum (diag(confusion_mat))/sum(confusion_mat)
misclas_svm
pvals <- c()
for (i in 1:length(data1)) {
ttest <- t.test(data1[i], data = data1, alternative = "two.sided")
pvals[i] <- ttest$p.value
}
pvalues_df <- data.frame(p_value=pvals,feature=1:length(data1))
pvalues_df <- pvalues_df[order(pvalues_df$p_value),]
a <- 0.05
L <- c()
it <- 1
for (j in 1:nrow(pvalues_df)) {
if(pvalues_df$p_value[j] < a * (j / nrow(pvalues_df)) )
{
L[it] <- j
it <- it +1
}
}
max(L)
LL = pvalues_df$p_value[max(L)]
LL
newPvalues <- c()
pvalue_feature <- c()
pvalue_status <- c()
j<- 1
for (j in 1:nrow(pvalues_df))
{
pvalue_status[j] <- TRUE
newPvalues[j] <- pvalues_df$p_value[j]
pvalue_feature[j] <- pvalues_df$feature[j]
if(pvalues_df$p_value[j] <= LL)
{
pvalue_status[j] <- FALSE
}}
result <- data.frame(p_value=newPvalues, feature=pvalue_feature,status=pvalue_status)
result
rejected_features <- c()
k <- 1
for (j in 1:ncol(data1)) {
if(result$status[j] == FALSE)
{
rejected_features[k] <- colnames(data1[result$feature[j]])
k<- k + 1
}
}
rejected_features
misclassification
library(kernlab)
pvalues_df
pvalues_df
pvalues_df
LL
benjamini_hochberg <- function(x, y, alpha) {
pvalues <- apply(x, 2, function(feature) {
t.test(feature ~ y, alternative="two.sided")$p.value
})
m <- length(pvalues)
sorted <- sort(pvalues)
values <- 1:m * alpha / m
L <- which.min(sorted <= values) - 1
mask <- sorted <= sorted[L]
list(mask=mask, pvalues=sorted, features=colnames(x)[order(pvalues)][mask])
}
result <- benjamini_hochberg(x=data[,-ncol(data)], y=data[, ncol(data)], alpha=0.05)
rejected <- length(result$features)
rejected
rejected_features
cat("Top 10 features")
cat(paste(result$features[1:10], collapse='\n' ) )
ggplot() +
ylab("P-Value") + xlab("Index") +
geom_point(data=data.frame(x=1:length(result$features),
y=result$pvalues[result$mask]),
aes(x=x, y=y), col="red") +
geom_point(data=data.frame(x=((length(result$features) + 1):(ncol(data) -1)),
y=result$pvalues[!result$mask]),
aes(x=x, y=y), col="blue")
ggplot() +
ylab("P-Value") + xlab("Index") +
geom_point(data=data.frame(x=1:length(result$features),
y=result$pvalues[result$mask]),
aes(x=x, y=y), col="red") +
geom_point(data=data.frame(x=((length(result$features) + 1):150),
y=result$pvalues[!result$mask][1:(150 - rejected)]),
aes(x=x, y=y), col="blue")
result
benjamini_hochberg <- function(x, y, alpha) {
pvalues <- apply(x, 2, function(feature) {
t.test(feature ~ y, alternative="two.sided")$p.value
})
m <- length(pvalues)
sorted <- sort(pvalues)
values <- 1:m * alpha / m
L <- which.min(sorted <= values) - 1
mask <- sorted <= sorted[L]
list(mask=mask, pvalues=sorted, features=colnames(x)[order(pvalues)][mask])
}
result <- benjamini_hochberg(x=data[,-ncol(data)], y=data[, ncol(data)], alpha=0.05)
rejected <- length(result$features)
cat("Top 10 features")
cat(paste(result$features[1:10], collapse='\n' ) )
ggplot() +
ylab("P-Value") + xlab("Index") +
geom_point(data=data.frame(x=1:length(result$features),
y=result$pvalues[result$mask]),
aes(x=x, y=y), col="red") +
geom_point(data=data.frame(x=((length(result$features) + 1):(ncol(data) -1)),
y=result$pvalues[!result$mask]),
aes(x=x, y=y), col="blue")
# Assignment 2
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
data1 <- as.data.frame(data)
data_email <- as.data.frame(data)
data_email$Conference <- as.factor(data$Conference)
n=dim(data_email)[1]
set.seed(12345)
# 70% Training Data
id=sample(1:n, floor(n*0.7))
train=data_email[id,]
# 30% validation & testing Data
test = data_email[-id,]
library(pamr)
rownames(train) <- 1:nrow(train)
which(colnames(train)=="Conference")
x <- t(train[,-4703])
y <- train[[4703]]
test_x <- t(test[,-4703])
mydata <- list(x=x, y= as.factor(y),
geneid=as.character(1:nrow(x)),genenames = rownames(x))
model_train <- pamr.train(mydata)
cv_model <- pamr.cv(model_train, data = mydata)
pamr.plotcv(cv_model)
print(cv_model)
model_fit <- pamr.train(mydata,threshold = cv_model$threshold[which.min(cv_model$error)])
par(mfrow=c(1,1),mar=c(2,2,2,2))
pamr.plotcen(model_train, mydata, threshold = model_fit$threshold)
features = pamr.listgenes(model_train,mydata, threshold = 1.306,genenames=TRUE)
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
ypredict <- pamr.predict(model_train, newx = test_x,type = "class", threshold = 1.306)
conf_mat <- table(ypredict, test$Conference)
misclas_centroid <- 1 - (sum(diag(conf_mat))/sum(conf_mat))
## Part 2
library(glmnet)
set.seed(12345)
response <- train$Conference
predictors <- as.matrix(train[,-4703])
elastic_model <- glmnet(x=predictors,y=response,family = "binomial",alpha = 0.5)
cv.fit <- cv.glmnet(x=predictors,y=response,family="binomial",alpha = 0.5)
cv.fit$lambda.min
par(mar=c(2,2,2,2))
plot(cv.fit)
plot(elastic_model)
predictor_test <- as.matrix(test[,-4703])
ypredict <- predict(object = elastic_model,newx = predictor_test, s = cv.fit$lambda.min,
type = "class", exact = TRUE)
confusion_mat <- table(ypredict,test$Conference)
misclassification <- 1 - (sum(diag(confusion_mat))/sum(confusion_mat))
library(kernlab)
x <- as.matrix(train[,-4703])
y <- train[,4703]
svm_fit <- ksvm(data = train,Conference ~ . ,kernel="vanilladot",
scaled = FALSE)
ypred <- predict(svm_fit, newdata = test, type="response")
confusion_mat <- table(ypred,test$Conference)
misclas_svm <- 1 - sum (diag(confusion_mat))/sum(confusion_mat)
benjamini_hochberg <- function(x, y, alpha) {
pvalues <- apply(x, 2, function(feature) {
t.test(feature ~ y, alternative="two.sided")$p.value
})
m <- length(pvalues)
sorted <- sort(pvalues)
values <- 1:m * alpha / m
L <- which.min(sorted <= values) - 1
mask <- sorted <= sorted[L]
list(mask=mask, pvalues=sorted, features=colnames(x)[order(pvalues)][mask])
}
result <- benjamini_hochberg(x=data[,-ncol(data)], y=data[, ncol(data)], alpha=0.05)
rejected <- length(result$features)
cat("Top 10 features")
cat(paste(result$features[1:10], collapse='\n' ) )
ggplot() +
ylab("P-Value") + xlab("Index") +
geom_point(data=data.frame(x=1:length(result$features),
y=result$pvalues[result$mask]),
aes(x=x, y=y), col="red") +
geom_point(data=data.frame(x=((length(result$features) + 1):(ncol(data) -1)),
y=result$pvalues[!result$mask]),
aes(x=x, y=y), col="blue")
ggplot() +
ylab("P-Value") + xlab("Index") +
geom_point(data=data.frame(x=1:length(result$features),
y=result$pvalues[result$mask]),
aes(x=x, y=y), col="red") +
geom_point(data=data.frame(x=((length(result$features) + 1):150),
y=result$pvalues[!result$mask][1:(150 - rejected)]),
aes(x=x, y=y), col="blue")
