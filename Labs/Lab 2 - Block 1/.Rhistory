set.seed(12345)
parama_conf = function(data){
controll = tree.control(nrow(data), minsize = 8)
fit = tree( EX ~ MET, data=data, control = controll)
op_tree = prune.tree(fit, best=leave_fit$size[which.min(leave_fit$dev)])
return(predict(op_tree, newdata=data))
}
param_predict = function(data){
controll = tree.control(nrow(data), minsize = 8)
fit = tree( EX ~ MET, data=data, control = controll)
op_tree = prune.tree(fit, best=leave_fit$size[which.min(leave_fit$dev)])
predictions = predict(op_tree, newdata=data)
return(rnorm(nrow(data),predictions,sd(resid(fit))))
}
rnd = function(data, model){
sample = data.frame(MET=data$MET, EX=data$EX)
sample$EX = rnorm(nrow(data), predict(model,newdata=data),sd(resid(model)))
return(sample)
}
set.seed(12345)
param_boot_conf = boot(data, statistic = parama_conf, R=1000, mle = op_tree,
ran.gen = rnd, sim = "parametric")
confidence_bound_param = envelope(param_boot_conf, level=0.95)
param_boot_predict = boot(data, statistic = param_predict, R=1000, mle = op_tree, ran.gen = rnd)
param_boot_predict = boot(data, statistic = param_predict, R=1000, mle = op_tree,
ran.gen = rnd,sim = "parametric")
prediction_bound_param = envelope(param_boot_predict, level=0.95)
plot(param_boot_conf)
plot(param_boot_predict)
predictions = predict(op_tree,data)
fig_data = data.frame(orig = data$EX, x=data$MET, pred=predictions,
upper_c=confidence_bound_param$point[1,],
lower_c=confidence_bound_param$point[2,],
upper_p=prediction_bound_param$point[1,],
lower_p=prediction_bound_param$point[2,])
para_plot = ggplot(fig_data, aes(orig,x,pred,upper_c,lower_c, upper_p, lower_p))
para_plot = para_plot +
geom_point(aes(x, pred)) +
geom_point(aes(x, orig),colour="blue") +
geom_line(aes(x,upper_c),colour="red") +
geom_line(aes(x,lower_c),colour="red") +
geom_line(aes(x,upper_p),colour="green")+
geom_line(aes(x,lower_p),colour="green")
para_plot
f_np = function(data,index){
sample = data[index,]
print(index)
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
np_bs = boot(data, statistic = f_np, R=1000)
a <-0
f_np = function(data,index){
sample = data[index,]
a<-count(index)
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
np_bs = boot(data, statistic = f_np, R=1000)
f_np = function(data,index){
sample = data[index,]
a<-index
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
np_bs = boot(data, statistic = f_np, R=1000)
a
a <-c()
f_np = function(data,index){
sample = data[index,]
a<-index
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
np_bs = boot(data, statistic = f_np, R=1000)
a
f_np = function(data,index){
sample = data[index,]
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
library(boot)
f_np = function(data,index){
sample = data[index,]
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
leave_fit = cv.tree(fit)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
np_bs = boot(data, statistic = f_np, R=1000)
leave_fit = cv.tree(fit)
library(boot)
f_np = function(data,index){
sample = data[index,]
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
leave_fit = cv.tree(fit)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
np_bs = boot(data, statistic = f_np, R=1000)
leave_fit = cv.tree(fit)
f_np = function(data,index){
sample = data[index,]
Ctrl = tree.control(nrow(sample), minsize = 8)
fit = tree( EX ~ MET, data=sample, control = Ctrl)
leave_fit = cv.tree(fit_tree)
optimal_tree = prune.tree(fit, best= leave_fit$size[which.min(leave_fit$dev)])
return(predict(optimal_tree, newdata=data))
}
np_bs = boot(data, statistic = f_np, R=1000)
rnd = function(data, model){
sample = data.frame(MET=data$MET, EX=data$EX)
sample$EX = rnorm(nrow(data), predict(model,newdata=data),sd(resid(model)))
return(sample)
}
set.seed(12345)
param_boot_conf = boot(data, statistic = parama_conf, R=1000, mle = op_tree,
ran.gen = rnd, sim = "parametric")
confidence_bound_param = envelope(param_boot_conf, level=0.95)
param_boot_predict = boot(data, statistic = param_predict, R=1000, mle = op_tree,
ran.gen = rnd,sim = "parametric")
prediction_bound_param = envelope(param_boot_predict, level=0.95)
plot(param_boot_conf)
plot(param_boot_predict)
predictions = predict(op_tree,data)
fig_data = data.frame(orig = data$EX, x=data$MET, pred=predictions,
upper_c=confidence_bound_param$point[1,],
lower_c=confidence_bound_param$point[2,],
upper_p=prediction_bound_param$point[1,],
lower_p=prediction_bound_param$point[2,])
para_plot = ggplot(fig_data, aes(orig,x,pred,upper_c,lower_c, upper_p, lower_p))
para_plot = para_plot +
geom_point(aes(x, pred)) +
geom_point(aes(x, orig),colour="blue") +
geom_line(aes(x,upper_c),colour="red") +
geom_line(aes(x,lower_c),colour="red") +
geom_line(aes(x,upper_p),colour="green")+
geom_line(aes(x,lower_p),colour="green")
para_plot
library(tree)
set.seed(12345)
data = read.csv2("State.csv", header = TRUE)
data = data[order(data$MET),] # reordering data with increase of MET variable
plot(EX ~ MET, data = data, pch = 19, cex = 1,col="blue")
set.seed(12345)
control_parameter = tree.control(nobs = nrow(data),minsize = 8)
fit_tree = tree(formula = EX ~ MET,data = data,control = control_parameter)
leave_fit = cv.tree(fit_tree)
plot(leave_fit$size, leave_fit$dev, main = "Deviance Vs Size of Tree" ,
type="b",col="red", pch= 19,cex=1)
op_tree = prune.tree(fit_tree,best = leave_fit$size[which.min(leave_fit$dev)])
param_predict = function(data){
controll = tree.control(nrow(data), minsize = 8)
fit = tree( EX ~ MET, data=data, control = controll)
op_tree = prune.tree(fit, best=leave_fit$size[which.min(leave_fit$dev)])
predictions = predict(op_tree, newdata=data)
return(dbnorm(nrow(data),predictions,sd(resid(fit))))
}
rnd = function(data, model){
sample = data.frame(MET=data$MET, EX=data$EX)
sample$EX = rnorm(nrow(data), predict(model,newdata=data),sd(resid(model)))
return(sample)
}
set.seed(12345)
param_boot_conf = boot(data, statistic = parama_conf, R=1000, mle = op_tree,
ran.gen = rnd, sim = "parametric")
confidence_bound_param = envelope(param_boot_conf, level=0.95)
param_boot_predict = boot(data, statistic = param_predict, R=1000, mle = op_tree,
ran.gen = rnd,sim = "parametric")
param_predict = function(data){
controll = tree.control(nrow(data), minsize = 8)
fit = tree( EX ~ MET, data=data, control = controll)
op_tree = prune.tree(fit, best=leave_fit$size[which.min(leave_fit$dev)])
predictions = predict(op_tree, newdata=data)
return(dbinom(nrow(data),predictions,sd(resid(fit))))
}
rnd = function(data, model){
sample = data.frame(MET=data$MET, EX=data$EX)
sample$EX = rnorm(nrow(data), predict(model,newdata=data),sd(resid(model)))
return(sample)
}
set.seed(12345)
param_boot_conf = boot(data, statistic = parama_conf, R=1000, mle = op_tree,
ran.gen = rnd, sim = "parametric")
confidence_bound_param = envelope(param_boot_conf, level=0.95)
param_boot_predict = boot(data, statistic = param_predict, R=1000, mle = op_tree,
ran.gen = rnd,sim = "parametric")
prediction_bound_param = envelope(param_boot_predict, level=0.95)
plot(param_boot_conf)
plot(param_boot_predict)
predictions = predict(op_tree,data)
fig_data = data.frame(orig = data$EX, x=data$MET, pred=predictions,
upper_c=confidence_bound_param$point[1,],
lower_c=confidence_bound_param$point[2,],
upper_p=prediction_bound_param$point[1,],
lower_p=prediction_bound_param$point[2,])
para_plot = ggplot(fig_data, aes(orig,x,pred,upper_c,lower_c, upper_p, lower_p))
para_plot = para_plot + geom_point(aes(x, pred)) + geom_point(aes(x, orig),colour="blue") +
geom_line(aes(x,upper_c),colour="red")+geom_line(aes(x,lower_c),colour="red")+
geom_line(aes(x,upper_p),colour="green")+geom_line(aes(x,lower_p),colour="green")
para_plot
library(ggplot2)
library(fastICA)
library(pls)
library(reshape2)
data <- read.csv2("NIRSpectra.csv")
View(data)
X <- scale(data[, -ncol(data)])
y <- data[, ncol(data)]
X
View(X)
?scale
x <- matrix(1:10, ncol = 2)
(centered.x <- scale(x, scale = FALSE))
x
centered.x
pca <- prcomp(X)
pca
lambda <- pca$sdev^2
variances <- lambda / sum(lambda)
lambda
var99_comp_count <- which.max(cumsum(variances * 100) > 99)
components <- as.data.frame(pca$x[, 1:var99_comp_count])
pc_comps <- 1:10
plot_data <- data.frame(x=pc_comps, Variance=variances[pc_comps])
ggplot(plot_data, aes(x=x, y=Variance)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=pc_comps, labels=as.numeric(pc_comps)) +
xlab("Principal Component")
?dim
pca
summary(pca)
pca$sdev
pca$sdev^2
lambda
variances <- lambda / sum(lambda)
d <- dim(data)[2]
d
z<- as.matrix(data[-d])
z
d
ncol(data)
colnames(data)
X <- scale(data[, -ncol(data)]) # removing column 127 viscosity
X
y <- data[, ncol(data)]
y
ncol(data)
pca <- prcomp(X)
lambda <- pca$sdev^2
variances <- lambda / sum(lambda)
var99_comp_count <- which.max(cumsum(variances * 100) > 99)
var99_comp_count
?cumsum
variances
lambda <- pca$sdev^2
variances <- (lambda / sum(lambda))* 100
var99_comp_count <- which.max(cumsum(variances) > 99)
components <- as.data.frame(pca$x[, 1:var99_comp_count])
var99_comp_count
components <- as.data.frame(pca$x[, 1:var99_comp_count])
pc_comps <- 1:10
plot_data <- data.frame(x=pc_comps, Variance=variances[pc_comps])
ggplot(plot_data, aes(x=x, y=Variance)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=pc_comps, labels=as.numeric(pc_comps)) +
xlab("Principal Component")
ggplot() +geom_col(aes(x = 1:20, y = pca$sdev[1:20]))
ggplot() +geom_col(aes(x = 1:10, y = pca$sdev[1:20]))
ggplot() +geom_col(aes(x = 1:10, y = pca$sdev[1:20]))
ggplot() +geom_col(aes(x = 1:10, y = pca$sdev[1:10]))
var99_comp_count <- which.max(cumsum(variances) > 99)
components <- as.data.frame(pca$x[, 1:var99_comp_count])
pc_comps <- 1:10
plot_data <- data.frame(x=pc_comps, Variance=variances[pc_comps])
ggplot(plot_data, aes(x=x, y=Variance)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=pc_comps, labels=as.numeric(pc_comps)) +
xlab("Principal Component")
components <- as.data.frame(pca$x[, 1:var99_comp_count])
components
var99_comp_count
pc_comps <- 1:10
plot_data <- data.frame(x=pc_comps, Variance=variances[pc_comps])
ggplot(plot_data, aes(x=x, y=Variance)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=pc_comps, labels=as.numeric(pc_comps)) +
xlab("Principal Component")
ggplot(components) +
geom_point(aes(x=PC1, y=PC2)) +
scale_x_continuous(breaks=pretty(components$PC1, n=6)) +
scale_y_continuous(breaks=pretty(components$PC2, n=6))
pca
pca$x
head(pca)
head(pca$x)
summary(pca)
summary(pca$x)
ggplot(components) +
geom_point(aes(x=PC1, y=PC2))
ggplot(components) +
geom_point(aes(x=PC1, y=PC2)) +
scale_x_continuous(breaks=pretty(components$PC1, n=6)) +
scale_y_continuous(breaks=pretty(components$PC2, n=6))
ggplot(components) +
geom_point(aes(x=PC1, y=PC2)) +
scale_x_continuous(breaks=pretty(components$PC1, n=6)) +
scale_y_continuous(breaks=pretty(components$PC2, n=6))
components$PC1
?pretty
ggplot(plot_data, aes(x=x, y=Variance)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=pc_comps, labels=as.numeric(pc_comps)) +
xlab("Principal Component")
ggplot(components) +
geom_point(aes(x=PC1, y=PC2)) +
scale_x_continuous(breaks=pretty(components$PC1, n=6)) +
scale_y_continuous(breaks=pretty(components$PC2, n=6))
ggplot(components) +
geom_point(aes(x=PC1, y=PC2)) +
scale_x_continuous(breaks=pretty(components$PC1, n=6)) +
scale_y_continuous(breaks=pretty(components$PC2, n=6))
U <- pca$rotation
U
plot_data <- data.frame(x=1:nrow(U), PC1=U[, 1], PC2=U[, 2])
plot_data <- melt(plot_data, id="x")
names(plot_data) <- c("Index", "Component", "Value")
xlimits <- seq(0, nrow(U), by=10)
ggplot(plot_data) +
geom_line(aes(x=Index, y=Value, color=Component), show.legend=FALSE) +
scale_x_discrete(limits=xlimits) +
facet_grid(Component ~ ., scales="free")
r1 <- pcs$rotation[,1] , r2 <- pcs$rotation[,2]
r1 <- pcs$rotation[,1] ; r2 <- pcs$rotation[,2]
r1 <- pca$rotation[,1] ; r2 <- pca$rotation[,2]
r1
ggplot() + geom_point(aes(x = 1:length(r1), y = r1, col = "PC1")) +
geom_point(aes(x = 1:length(r2), y = r2, col = "PC2")) +
labs(title = "Plot of loadings", x = "Index", y = "Loadings")
set.seed(12345)
?fastICA
var99_comp_count
ica
ggplot() + geom_point(aes(x = 1:length(r1), y = r1, col = "PC1")) +
geom_point(aes(x = 1:length(r2), y = r2, col = "PC2")) +
labs(title = "Plot of loadings", x = "Index", y = "Loadings")
ica <- fastICA(X, var99_comp_count, alg.typ="parallel", fun="logcosh", alpha=1,
method="R", row.norm=FALSE, maxit=200, tol=1e-06, verbose=FALSE)
ica
summary(ica)
W_prime <- ica$K %*% ica$W  # W`=K*W summary(ica)
W_prime
components <- as.data.frame(ica$S)
components
colnames(components) <- c("IC1", "IC2")
plot_data <- data.frame(Index=1:nrow(W_prime), IC1=W_prime[, 1], IC2=W_prime[, 2])
plot_data
plot_data <- melt(plot_data, id="Index", variable.name="Component", value.name="Value")
xlimits <- seq(0, nrow(W_prime), by=10)
ggplot(plot_data) +
geom_line(aes(x=Index, y=Value, color=Component), show.legend=FALSE) +
scale_x_discrete(limits=xlimits) +
facet_grid(Component ~ ., scales="free")
Wp <- ica$K %*% ica$W # W`=K*W summary(ica)
d <- dim(Wp)[1]
Wp1 <- Wp[,1]
Wp2 <- Wp[,2]
ggplot() +
geom_point(aes(x = 1:d, Wp1, col = "Wp1")) +
geom_point(aes(x = 1:d, Wp2, col = "Wp2")) +
labs(title = "Plot of columns of W'"
, x = "Index"
, y = "W'")
W_prime <- ica$K %*% ica$W  # W`=K*W summary(ica)
ggplot(components) +
geom_point(aes(x=IC1, y=IC2)) +
scale_x_continuous(breaks=pretty(components$IC1, n=6)) +
scale_y_continuous(breaks=pretty(components$IC2, n=6))
ggplot(components) +
geom_point(aes(x=Wp1, y=Wp2)) +
scale_x_continuous(breaks=pretty(components$IC1, n=6)) +
scale_y_continuous(breaks=pretty(components$IC2, n=6))
ggplot(components) +
geom_point(aes(x=Wp1, y=Wp2)) +
scale_x_continuous(breaks=pretty(components$Wp1, n=6)) +
scale_y_continuous(breaks=pretty(components$Wp2, n=6))
ggplot(components) +
geom_point(aes(x=Wp1, y=Wp2)) +
scale_x_continuous(breaks=pretty(components$Wp1, n=6)) +
scale_y_continuous(breaks=pretty(components$Wp2, n=6))
ggplot(components) +
geom_point(aes(x=Wp1, y=Wp2))
IC1
components
components <- ica$S
components <- ica$S
ggplot(components) +
geom_point(aes(x=Wp[,1], y=Wp[,2])) +
scale_x_continuous(breaks=pretty(components[,1], n=6)) +
scale_y_continuous(breaks=pretty(components[,2], n=6))
components
ggplot(components) +
geom_point(aes(x=Wp[,1], y=Wp[,2])) +
scale_x_continuous(breaks=pretty(components[,1], n=6)) +
scale_y_continuous(breaks=pretty(components[,2], n=6))
colnames(components) <- c("A","B")
ggplot(components) +
geom_point(aes(x=Wp[,1], y=Wp[,2])) +
scale_x_continuous(breaks=pretty(components$A, n=6)) +
scale_y_continuous(breaks=pretty(components$B, n=6))
score1 <- ica$S[,1]
score2 <- ica$S[,2]
d1 <- dim(score1)[1]
ggplot() +
geom_point(aes(x = score1, y = score2)) +
#geom_point(aes(x = 1:d1, score2, col = "PC2 score")) +
labs(title = "Plot of scores of principal components"
, x = "Index"
, y = "W'")
library(ggplot2)
library(fastICA)
library(pls)
library(reshape2)
data <- read.csv2("NIRSpectra.csv")
X <- scale(data[, -ncol(data)]) # removing column 127 viscosity
y <- data[, ncol(data)]
pca <- prcomp(X) # can also do here scaling using scale=TRUE
lambda <- pca$sdev^2 # Eigenvalues
variances <- (lambda / sum(lambda))* 100 # proportion of variation
var99_comp_count <- which.max(cumsum(variances) > 99) # which show variance greater then 99%
components <- as.data.frame(pca$x[, 1:var99_comp_count]) # extracting first two components that show variance greater then 99 %
pc_comps <- 1:10
plot_data <- data.frame(x=pc_comps, Variance=variances[pc_comps])
ggplot(plot_data, aes(x=x, y=Variance)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=pc_comps, labels=as.numeric(pc_comps)) +
xlab("Principal Component")
ggplot(components) +
geom_point(aes(x=PC1, y=PC2)) +
scale_x_continuous(breaks=pretty(components$PC1, n=6)) +
scale_y_continuous(breaks=pretty(components$PC2, n=6))
U<-pca$rotation#Loadings are the coordinates of the principal components in the original vector space
r1 <- pca$rotation[,1] ; r2 <- pca$rotation[,2]
ggplot() + geom_point(aes(x = 1:length(r1), y = r1, col = "PC1")) +
geom_point(aes(x = 1:length(r2), y = r2, col = "PC2")) +
labs(title = "Plot of loadings", x = "Index", y = "Loadings")
ica <- fastICA(X, var99_comp_count, alg.typ="parallel", fun="logcosh", alpha=1,
method="R", row.norm=FALSE, maxit=200, tol=1e-06, verbose=FALSE)
Wp <- ica$K %*% ica$W # W`=K*W summary(ica)
d <- dim(Wp)[1]
Wp1 <- Wp[,1]
Wp2 <- Wp[,2]
Wp1
ggplot() + geom_point(aes(x = 1:d, Wp1, col = "Wp1")) + geom_point(aes(x = 1:d, Wp2, col = "Wp2")) +
labs(title = "Plot of columns of W'", x = "Index", y = "W'")
Y <- X %*% Wp
score1 <- ica$S[,1]
score2 <- ica$S[,2]
d1 <- dim(score1)[1]
ggplot() +
geom_point(aes(x = score1, y = score2)) +
#geom_point(aes(x = 1:d1, score2, col = "PC2 score")) +
labs(title = "Plot of scores of principal components"
, x = "Index"
, y = "W'")
?pcr
set.seed(12345)
pcrfit <- pcr(Viscosity ~ ., data=data, scale=TRUE)
cvpcrfit <- crossval(pcrfit, segments=10, segment.type="random")
cv_scores <- t(matrix(MSEP(cvpcrfit)$val, nrow=2))
plot_data <- data.frame(cbind(1:ncol(data), cv_scores))
colnames(plot_data) <- c("Components", "CV", "adjCV")
plot_data <- melt(plot_data, id="Components",
variable.name="Measure", value.name="MSEP")
xlimits <- seq(0, ncol(data), by=5)
ylimits <- seq(0, max(plot_data$MSEP) + 0.05, by=0.05)
ggplot(plot_data) +
geom_line(aes(x=Components, y=MSEP, color=Measure), size=1) +
scale_x_discrete(limits=xlimits) +
scale_y_continuous(breaks=ylimits, labels=ylimits,
limits=c(0, max(plot_data$MSEP)))
set.seed(12345)
pcrfit <- pcr(Viscosity ~ ., data=data, scale=TRUE,validation = c("CV"))
predictors <- paste("X", seq(750, 1000, 2), sep="")
f <- formula(paste("Viscosity ~ "
, paste(predictors
, collapse = " + ")))
pcr.fit <- pcr(f, data = data, validation = "CV")
validationplot(pcr.fit,val.type = "MSEP")
set.seed(12345)
pcr.fit <- pcr(f, data = data, validation = "CV")
validationplot(pcr.fit,val.type = "MSEP")
predictors <- paste("X", seq(750, 1000, 2), sep="")
predictors
f <- formula(paste("Viscosity ~ ", paste(predictors , collapse = " + ")))
f
set.seed(12345)
pcr.fit <- pcr(f, data = data, validation = "CV")
validationplot(pcr.fit,val.type = "MSEP")
?validationplot
